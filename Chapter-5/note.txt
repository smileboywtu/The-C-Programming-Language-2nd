Chapter-5

1. pointers have been lumped with the goto statement as a marvelous way to create impossible-understand-programs.
2. the type void* replaces with char* as a proper type for generic pointer type.
3. A pointer is a group of cells that can hold an address.
4. the unary operator & gives the address of an object.
5. the operator can not be applied to expression, constants and register variables, it can only apply to objects in memory.
6. the unary operator * is an indirection or dereferrence operator.
7. every pointer point to a specific data type.
8. a point to void is used to hold any type of pointers, but can not be dereferrenced itself.
9. the operator * and & bind more tightly than arithmatic operators.
10. the parenthese are necessary in (*p)++ because the operator * and ++ associate right to left.
11. c pass arugments by value.
12. any operation can be done by array subscripting can be also done with pointers.
13. the pointer version will in general  be faster.
14. when you increase the pointer size, this will point to the next elements regardless of the type or size of the variable.
15. since the name of an array is a synonym for the location of the initial element, so the assignment pa = &a[0] can also be written  as pa = a;
16. pointer and array name have one difference that must keep in mind: pointer is a variable, but array name is not a variable.
17. it's illegal to  refer to objects that are not within the array bounds.
18. the behavior is undefined for the arithmatic and comparisons with pointers that do not point to the members of the same array.
19. the stddef.h defines ptrdiff_t that is large enough to hold the signed difference of two pointer values.
20. however we could use the size_t to match the standard library version.
21. all the pointer manipulation automatically take into account the size of the object pointed to.
22. it's illegal to add two pointers, nor to assign a pointer of one type to a pointer of another type without a case.
23. shift, mask, divide and add a double or float is not legal.
24. the array is terminated with null character '\0', so that the program can find the end.
25. when a string occurs in a program like this: printf("I am a confident guy.\n"), access to it through a character pointer.
26. C does not provide any operators for processing an entire string of characters as an unit.
27. there is an important difference between these definitions:
	char amessage[] = "I am good enough.";
	char* pmessage  = "I am good enough too.";
	amessage is an array, just big enough to hold the characters that '\0' initializes it. individual character may be changed within the array
	but amessage will alway refer to the same storage. on the other hand, pmessage is a character pointer that point to the string constant,
	it can be pointed to other charater string, but the result is undefined if you try to modify the string contents.
28. look at the example:
	(*p)++
	*p++
	the first one will increase the content of pointer p after its use.
	the second one will increase the address of pointer p after its use.
29. the pair of expression:
	*p++ = val;
	val = *--p;
	is the standard idioms for pushing and poping a stack.
30. if you want to catch two string, you'd batter make sure there is enough space to store the copy ones.
31. since pointers are variables themselves, they can be stored in arrays just as other variables can.
32. C provides rectangular multi-dimentional arrays, although in practice they are  much less used than arrays of pointers.
33. if a two-dimensional array is to be passed to a function, the parameter declaration in the function must include the number of colums.
34. f(int (*daytab)[13]){ ...} which says that the parameter is a pointer to an array of 13 integers. int *day[13] is an array of 13 pointer
	to integers.
35. more generally, only the first dimension of an array is free, all the others have to be specified.
36. the important advantage of the pointer array is that the rows of the array may be of different lengths.
37. By convention, argv[0] is the name by which the program was invoked, so argc is at least 1.
38. printf((argc>1)?"%s ":"%s", *++argv); this shows that the format argument of printf can be an expression too.
39. 
